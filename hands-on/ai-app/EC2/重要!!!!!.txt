Attenntion Points No1.
    sudoコマンドを使うときは sudo pip install を使わないと使えない!!!
    python ~.py の時はpip install でインストールしたライブラリが使用されて
    sudo python ~.py の時は sudo pip install でインストールされたライブラリが使用される

Attenntion Points No2.
    transform = transforms.Compose([
        
        Failed.
        # transforms.Resize((64, 64)), # 256, 256)), # 入力画像のサイズがバラバラなので、すべて256*256にリサイズする
        # transforms.ToTensor(),
        # # データ拡張のための前処理
        # transforms.RandomHorizontalFlip(), # ランダムに左右を入れ変える
        # transforms.ColorJitter(), # ランダムに画像の色値を変える
        # transforms.RandomRotation(10), # ランダムに画像の回転を行う(今回は10度)

        Success.
        transforms.Resize((64, 64)), 
        # transforms.CenterCrop(224),  
        transforms.RandomHorizontalFlip(),
        transforms.ColorJitter(), # ランダムに画像の色値を変える
        transforms.RandomRotation(10), # ランダムに画像の回転を行う(今回は10度)
        transforms.ToTensor(), # 重要ポイント
        # transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    *****
    実行環境の違いによるエラー(Ubuntu と Windows)
    # EC2内で実行する際はToTensor()の後にデータ拡張をしてしまうとなぜかエラーになる.
        > 社用PCの場合は、逆にToTensor()が最後だとエラーになる
    # なのでToTensor()は最後に処理する
        *****
        > 訂正
            > 最後ではなく、領域消去や正規化の前
        *****
    *****
    # 参考サイト : https://stackoverflow.com/questions/57079219/img-should-be-pil-image-got-class-torch-tensor

# 補足
    評価のみを行うときは学習済みモデルをロードすること!!!!!


    # データ拡張について : https://qiita.com/enbi/items/f84d253b79184c903c27



*** EC2 history ***
EC2 login : ssh -i "C:/Users/0107409377/.ssh/aws_ken.pem" ubuntu@ec2-{public IPv4アドレス}.compute-1.amazonaws.com
(model) ubuntu@ip-172-31-88-52:~/model$ history
    
   # success install
    3  sudo apt install python-is-python3
    4  sudo apt update
    5  sudo apt install python3-pip
    6  sudo pip install flask
   10  sudo apt install python3.8-venv
   33  pip install matplotlib
   33  sudo pip install matplotlib # Different from normal pip
   (13  pip install flask) # if you need...
   (14  pip install numpy) # if you need...
   49  pip install torch==1.5.0+cpu
   67  sudo pip install torch==1.5.0 # success # Different from normal pip
   69  sudo pip install torchvision==0.6.0 # success # Different from normal pip
   64  sudo pip install pillow # # Different from normal pip
   
   # error
   15  (Failed) pip install torch torchvision # too weight # error
   66  (Failed) sudo pip install torch # too weight # error
   65  (Failed) sudo pip install torch==1.5.0+cpu # error # Version cannot be specified by sudo
   62  (no need) pip install pillow # already installed
    

   # create & activate pyenv environment
    7  mkdir model
   11  python -m venv model
   12  source model/bin/activate
   20  deactivate
   17  free -m
   70  sudo python cnn.py
   79  sudo python horiuchi-model.py
   80  python horiuchi-model.py


# Todo
    1. horiuchi-model.pyのデプロイ # yet
    2. pltで出力された画像の保存 # done
   

# EC2からgitへのpush方法(トークン生成)
    githubのプロフィール写真 > Settings > Developer Settings > Personal access tokens > Tokens(Classic) > Generate new token

    # トークン生成 & アクセス権付与方法
    1. Note：任意の名称を入れてください。
    2. Expiration：何日の有効にするかを決めてください。（悩むなら30日でいいです）
    3. Select scopes：repoと、admin:repoとdelete:repoは必須でチェックを入れる
    4. 設定が終わったら「generate token」を押してアクセスコードを発行する。
    5. 作成したトークンをコピーする
    # ここまでの参考サイト : https://qiita.com/setonao/items/28749762c0bc1fbbf502

    6. Terminalで以下を実行
        $ git remote remove origin
        $ git remote add origin https://<トークン>@github.com/<ユーザ>/<リポジトリ>.git
        ※上記コマンドでなくても直接.git/configでoriginのurlを書き替えてもOKです。
    # ここまでの参考サイト : https://qiita.com/atsymd/items/a1ff5a496b78f47ce80e